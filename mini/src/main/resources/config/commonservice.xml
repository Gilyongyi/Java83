<?xml version="1.0" encoding="UTF-8" ?>

<beans 	xmlns="http://www.springframework.org/schema/beans"
				xmlns:context="http://www.springframework.org/schema/context"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns:aop="http://www.springframework.org/schema/aop"
				xmlns:tx="http://www.springframework.org/schema/tx"
				xsi:schemaLocation="http://www.springframework.org/schema/beans
									 http://www.springframework.org/schema/beans/spring-beans.xsd
									 http://www.springframework.org/schema/context
									 http://www.springframework.org/schema/context/spring-context.xsd
									 http://www.springframework.org/schema/tx
									 http://www.springframework.org/schema/tx/spring-tx.xsd
									 http://www.springframework.org/schema/aop
									 http://www.springframework.org/schema/aop/spring-aop.xsd">												 
												 
  										
<!-- PropertyPlaceholderConfigurer 로 로드된 resource 는 ${}로 접근 가능 -->
<bean id="propertyConfigurer" 
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/jdbc.properties"/>
</bean>

<!-- DBCP 사용 -->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
	<property name="driverClassName" value="${jdbc.driverClassName}"/>
	<property name="url" value="${jdbc.url}"/>
	<property name="username" value="${jdbc.username}"/>
	<property name="password" value="${jdbc.password}"/>
	<property name="initialSize" value="${jdbc.initialSize}"/>
	<property name="maxActive" value="${jdbc.maxActive}"/>
</bean>

<!-- SqlSession 인스턴스를 생성하는 sqlSessionFactory 생성
	 Factory Pattern 적용 :: Spring 의 FactoryBean interface 구현 -->
<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="configLocation" value="classpath:config/mini-config.xml"/>
</bean>

<!-- SqlSessionTeampate 인스턴스 생성
	 Spring 과 연동시 사용하는 핵심 SqlSession 구현체
	 Spring 에서 제공하는 Transaction 처리에 구조화된 SqlSession 구현체 -->
<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg ref="sqlSessionFactoryBean"/>
</bean>

<context:component-scan base-package="mini.service.user.impl"/>
<context:component-scan base-package="mini.service.product.impl"/>
<context:component-scan base-package="mini.service.purchase.impl"/>
	<!-- <bean id="userDaoImpl" class="mini.service.user.impl.UserDaoImpl">
		<property name="sqlSession" ref="sqlSessionTemplate"/>
	</bean>
	
	<bean id="userServiceImpl" class="mini.service.user.impl.UserServiceImpl">
		<property name="userDao" ref="userDaoImpl"/>
	</bean> -->
<bean id="pojoAspect" class="mini.service.PojoAspectJ"/>

<aop:config>
	<aop:aspect ref="pojoAspect">
		<aop:around pointcut="execution(* mini.service..*Impl*.*(..))" method="invoke"/>
	</aop:aspect>
</aop:config>

<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"/>
</bean>

<tx:advice id="txAdvice" transaction-manager="transactionManager">
	<tx:attributes>
		<!-- <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
		<tx:method name="add*"/>default = required  -->
		<tx:method name="*"/>
	</tx:attributes>
</tx:advice>	
	
<aop:config>
	<aop:pointcut id="requiredTx" expression="execution(* mini.service..*ServiceImpl*.*(..))"/>
	<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx"/>
</aop:config>

</beans>