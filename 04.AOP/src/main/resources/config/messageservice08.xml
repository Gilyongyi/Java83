<?xml version="1.0" encoding="UTF-8"?>

<beans 	xmlns="http://www.springframework.org/schema/beans"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns:aop="http://www.springframework.org/schema/aop"
				xsi:schemaLocation="http://www.springframework.org/schema/beans
									http://www.springframework.org/schema/beans/spring-beans.xsd
									http://www.springframework.org/schema/aop
									http://www.springframework.org/schema/aop/spring-aop.xsd">
									

<bean id="message" class="spring.service.aop.impl.MessageImpl"/>
<!-- <bean id="testAspect" class="spring.service.aop.advice.TestAspectJ02"/> -->
<!-- <bean id="testPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
	<property name="expression" value="execution(public !void get*(..))"/>
</bean> -->
<!-- <bean id="testAdvisor" class="org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">
	<property name="advice" ref="testAdvice"/>
	<property name="expression" value="execution(* *.getMessage(..))"/>
</bean>
 -->
<bean id="pojoAspect" class="spring.service.aop.advice.PojoAspectJ"/>
<!-- <aop:config>
	<aop:aspect ref="pojoAspect">
		<aop:pointcut expression="execution(* *.getMessage(..))" id="work"/>
		<aop:before pointcut-ref="work" method="before"/>
		<aop:after-returning pointcut-ref="work" method="afterReturning" returning="returnValue"/>
		<aop:around pointcut-ref="work" method="invoke"/>
		<aop:after-throwing pointcut-ref="work" method="afterThrowing" throwing="throwable"/>
	</aop:aspect>
</aop:config>
 -->
<aop:config>
	<aop:aspect	ref="pojoAspect">
		<aop:before pointcut="execution(* *.getMessage(..))" method="before"/>
		<aop:after-returning pointcut="within(spring.service.aop..*)" method="afterReturning" returning="returnValue"/>
		<aop:around pointcut="execution(* spring.service.aop.*.*(..))" method="invoke"/>
		<aop:after-throwing pointcut="execution(public * *(..))" method="afterThrowing" throwing="throwable"/>
	</aop:aspect>
</aop:config>


<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/> -->
<aop:aspectj-autoproxy/>
</beans>
